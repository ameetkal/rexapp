rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read/write their own user document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Allow others to read basic user info for following/search
      allow read: if request.auth != null;
    }
    
    // Posts - anyone can read (for invite pages), authors can write
    match /posts/{postId} {
      // Anyone can read posts (including unauthenticated users for invite pages)
      allow read: if true;
      
      // Only the author can create their posts
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.authorId;
      
      // Authors can update their posts, OR authenticated users can update savedBy field only
      allow update: if request.auth != null && (
        request.auth.uid == resource.data.authorId ||
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['savedBy'])
      );
        
      // Only the author can delete their posts  
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.authorId;
    }
    
    // Personal items - anyone can read (for invite pages), users can only write their own
    match /personal_items/{itemId} {
      // Anyone can read personal items (for personal invite pages)
      allow read: if true;
      // Users can only write their own personal items
      allow write: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
    }
    
    // Notifications - users can read their own, system can create them
    match /notifications/{notificationId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null;
      allow update: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // NEW DATA MODEL COLLECTIONS
    
    // Things - anyone can read, authenticated users can create
    match /things/{thingId} {
      allow read: if true; // Anyone can read things (for invite pages)
      allow create: if request.auth != null;
      // No updates or deletes - things are immutable once created
    }
    
    // User Thing Interactions - users can read/write their own
    match /user_thing_interactions/{interactionId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
    }
    
    // Recommendations - users can read their own, create recommendations to others
    match /recommendations/{recommendationId} {
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.fromUserId ||
        request.auth.uid == resource.data.toUserId
      );
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.fromUserId;
      allow update, delete: if request.auth != null && 
        request.auth.uid == resource.data.fromUserId;
    }
    
    // Posts V2 - anyone can read (for invite pages), authors can write
    match /posts_v2/{postId} {
      allow read: if true; // Anyone can read posts (for invite pages)
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.authorId;
      allow update: if request.auth != null && (
        request.auth.uid == resource.data.authorId ||
        // Allow users to like/unlike posts
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likedBy'])
      );
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.authorId;
    }
    
    // Allow authenticated users to read all documents for search functionality
    match /{document=**} {
      allow read: if request.auth != null;
    }
  }
} 