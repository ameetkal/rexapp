rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users - read/write own profile, read others for search
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
    }
    
    // Notifications - users read/write their own
    match /notifications/{notificationId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null;
      allow update: if request.auth != null && request.auth.uid == resource.data.userId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // ===== NEW SYSTEM COLLECTIONS =====
    
    // Things - anyone can read, authenticated users can create
    match /things/{thingId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if false;
      allow delete: if false;
    }
    
    // User Thing Interactions - users read/write their own
    match /user_thing_interactions/{interactionId} {
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // Recommendations - users read their own, create to others
    match /recommendations/{recommendationId} {
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.fromUserId ||
        request.auth.uid == resource.data.toUserId
      );
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.fromUserId;
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.fromUserId;
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.fromUserId;
    }
    
    // Posts V2 - anyone can read, authors can write
    match /posts_v2/{postId} {
      allow read: if true;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.authorId;
      allow update: if request.auth != null && (
        request.auth.uid == resource.data.authorId ||
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likedBy']) ||
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['commentCount']) ||
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likedBy', 'commentCount'])
      );
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.authorId;
    }
    
    // Comments - anyone can read, users can create/delete their own
    match /comments/{commentId} {
      allow read: if true;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.authorId;
      allow update: if request.auth != null && (
        request.auth.uid == resource.data.authorId ||
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likedBy'])
      );
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.authorId;
    }
    
    // LEGACY: Keep old collections read-only for backward compatibility with existing invite links
    match /posts/{postId} {
      allow read: if true;
    }
    
    match /personal_items/{itemId} {
      allow read: if true;
    }
    
    // Fallback - allow authenticated users to read all for search
    match /{document=**} {
      allow read: if request.auth != null;
    }
  }
}
